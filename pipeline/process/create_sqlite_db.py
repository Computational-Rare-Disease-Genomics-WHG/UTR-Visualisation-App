"""
Creates table names in the sqlite3 database
"""

# E. D'Souza
# Final part of the pipeline
# Takes the data generated by VEP from ClinVar and gnomAD
# Creates a sqlite3 database with the data

# from sqlalchemy import create_engine
# from sqlalchemy.schema import CreateTable


import sqlite3
import argparse
import os
import sys


gnomad_variants_query = '''
    CREATE TABLE IF NOT EXISTS gnomad_variants 
        (variant_id varchar, 
        pop_ac int,
        ref varchar,
        alt varchar)'''

clinvar_variants_query = '''
CREATE TABLE IF NOT EXISTS clinvar_variants 
    (variant_id varchar, 
    pop_ac int, ref varchar, 
    alt varchar,
    allele_id int,
    review_status varchar,
    clinsig varchar)'''

contraint_query = '''CREATE TABLE IF NOT EXISTS constraint 
    (ensembl_gene_name varchar, 
    loeuf float)'''

possible_utr_variants_query = '''
CREATE TABLE IF NOT EXISTS possible_utr_variants 
    (variant_id varchar,
    five_prime_utr_consequence varchar,
    five_prime_utr_annotation data,
    intervals data)'''


mane_summary_query = '''
CREATE TABLE IF NOT EXISTS mane_summary (
    ensembl_transcript_id varchar, 
    ensembl_gene_id varchar, 
    mane_status varchar, 
    refseq_match varchar,
    hgnc_name varchar
)
'''

mane_features_query = '''
CREATE TABLE IF NOT EXISTS mane_features (
    start int, 
    stop int, 
    chr int, 
    strand varchar
    type varchar,
)
'''

mane_transcript_seqs_query = '''
CREATE TABLE IF NOT EXISTS mane_transcript_seqs (
    ensembl_transcript_id  varchar, 
    annotations varchar,
    seq varchar, 
    type varchar, 
    genem 
    gene_biotype varchar, 
    transcript_biotype varchar, 
    gene_symbol varchar, 
    description varchar, 
    build varchar, 
    chr varchar, 
    start varchar, 
    end varchar, 
    strand varchar, 
)
'''


tbl_queries = {
    'gnomad_variants': gnomad_variants_query,
    'clinvar_variants': clinvar_variants_query,
    'constraint': contraint_query,
    'possible_utr_variants': possible_utr_variants_query,
    'mane_summary': mane_summary_query,
    'mane_features': mane_features_query,
    'mane_transcript_seqs_query': mane_transcript_seqs_query

}


def main(args):
    """Entry point"""

    if os.path.isfile(args.db_name) and not args.overwrite:
        print(f'Database already exists at {args.db_name}')
        sys.exit(0)

    # Create connection and cursor with the database
    conn = sqlite3.connect(args.db_name)
    c = conn.cursor()

    if args.table_name == 'all':
        options = tbl_queries.keys()
    else:
        options = [args.table_name]

    for opt in options:
        print(f'Creating table {opt} in database {args.db_name}')
        c.execute(tbl_queries[opt])
        conn.commit()
    print(f'Completed creating tables')
    conn.close()


if __name__ == '__main__':
    parser = argparse.ArgumentParser(
        description='Creates a TSV file that creates all possible UTR variants'
    )
    parser.add_argument(
        '--table_name',
        required=True,
        type=str,
        default='all',
        help='Name of the table that we wish to create (Default: all)'
    )
    parser.add_argument(
        '--db_name',
        required=True,
        type=str,
        help='Output sqlite3 file name and location',
    )
    parser.add_argument(
        '--overwrite',
        action='store_true',
        help='Overwrite existing database if exists',
    )

    parser.add_argument(
        '--verbose',
        action='store_true',
        help='Verbose outputs',
    )
    main(args=parser.parse_args())
