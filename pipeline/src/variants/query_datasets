#!/bin/sh
# This script filters a VCF file using tabix and saves the results as a TSV file
# The script takes four arguments as named variables:
# -i/--input_file: The input VCF file
# -o/--output_file: The output TSV file
# -r/--region_file: The region file to use for filtering
# -t/--data_type: The type of data (gnomad or clinvar)

# Define the usage message
usage="Usage: $(basename $0) -i|--input_file <input_file> -o|--output_file <output_file> -r|--region_file <region_file> -t|--data_type <gnomad|clinvar>"

# Parse command-line arguments
while [[ $# -gt 0 ]]; do
  case "$1" in
    -i|--input_file)
      input_file="$2"
      shift 2
      ;;
    -o|--output_file)
      output_file="$2"
      shift 2
      ;;
    -r|--region_file)
      region_file="$2"
      shift 2
      ;;
    -t|--data_type)
      data_type="$2"
      shift 2
      ;;
    -v|--output_vcf)
      output_vcf="$2"
      shift 2
      ;;
    *)
      echo "Invalid argument: $1"
      echo $usage
      exit 1
      ;;
  esac
done

# Check if all required arguments are provided
if [ -z "$input_file" ] || [ -z "$output_file" ] || [ -z "$region_file" ] || [ -z "$data_type" ]; then
  echo "Missing arguments"
  echo $usage
  exit 1
fi

# Check if the input file exists
if [ ! -f "$input_file" ]; then
    echo "Input file not found: $input_file"
    exit 1
fi

# Check if the output file already exists
if [ -f "$output_file" ]; then
    echo "Output file already exists: $output_file"
    exit 1
fi


# Define the headers for the output TSV file
if [ "$data_type" = "gnomad" ]; then
    # If type is gnomad, then we need to add the following headers
    # NOTE:
    # We require the following headers from gnomAD
    # CHROM, POS, ID, HGVSC, INFO/AC, INFO/AN, INFO/AF, INFO/vep, INFO/variant_type
    headers='chrom\tpos\tref\talt\tvariant_id\tac\tan\taf\tvep\tvariant_type'
    query_string='%CHROM\t%POS\t%REF\t%ALT\t%ID\t%INFO/AC\t%INFO/AN\t%INFO/AF\t%INFO/vep\t%INFO/variant_type\n'
# Otherwise if clinvar, then we need to add the following headers
elif [ "$data_type" = 'clinvar' ]; then
    # NOTE:
    # We require the following headers from ClinVar
    headers='chrom\tpos\tref\talt\tclinvar_id\tvariant_id\talleleid\tclndn\tclndnincl\tclndisdb\tclndisdbincl\tclnhgvs\tclnrevstat\tclnsig\tclnsigconf\tclnsigincl\tclnvc\tclnvco\tclnvi\tdbvarid\tgeneinfo\tmc\torigin\trs'
    query_string='%CHROM\t%POS\t%REF\t%ALT\t%ID\t%CHROM-%POS-%REF-%ALT\t%INFO/ALLELEID\t%INFO/CLNDN\t%INFO/CLNDNINCL\t%INFO/CLNDISDB\t%INFO/CLNDISDBINCL\t%INFO/CLNHGVS\t%INFO/CLNREVSTAT\t%INFO/CLNSIG\t%INFO/CLNSIGCONF\t%INFO/CLNSIGINCL\t%INFO/CLNVC\t%INFO/CLNVCSO\t%INFO/CLNVI\t%INFO/DBVARID\t%INFO/GENEINFO\t%INFO/MC\t%INFO/ORIGIN\t%INFO/RS\n'

else
    echo "Invalid type argument: $data_type"
    exit 1
fi

# Filter using tabix using the specified region file 
# and perform query save to the output file
echo -e $headers > $output_file && tabix -h $input_file -R $region_file > $output_vcf
bcftools query -f $query_string $output_vcf >> $output_file

echo "Filtered TSV file saved to $output_file"
